/**

Generated by the following Solidity interface...
```solidity
interface HelperConfig {
    struct NetworkConfig {
        uint256 deployerKey;
        address deployerAddress;
        address aaveLendingPool;
        address aaveIncentives;
        address uniswapV3Factory;
        address uniswapV3Router;
        address usdc;
        address usdt;
        address dai;
        address weth;
    }

    constructor();

    function IS_SCRIPT() external view returns (bool);
    function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address aaveIncentives, address uniswapV3Factory, address uniswapV3Router, address usdc, address usdt, address dai, address weth);
    function getActiveNetworkConfig() external view returns (NetworkConfig memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "activeNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "deployerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deployerAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aaveLendingPool",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aaveIncentives",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Factory",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdc",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdt",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "dai",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "weth",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct HelperConfig.NetworkConfig",
        "components": [
          {
            "name": "deployerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deployerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aaveLendingPool",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aaveIncentives",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Factory",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Router",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdc",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdt",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "dai",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "weth",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod HelperConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff19166201000117905534801561002157600080fd5b504661a4b11480610033575046617a69145b156103075760405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152600090600080516020610c8e8339815191529063c1978d1f90606401602060405180830381865afa1580156100a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c49190610903565b604080516101408101825282815290516001625e79b760e01b0319815260048101839052919250906020820190600080516020610c8e8339815191529063ffa1864990602401602060405180830381865afa158015610127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014b919061091c565b6001600160a01b03908116825273794a61358d6845594f94dc1db02a252b5b4814ad60208084019190915273929ec64c34a17401f460460d4b9390518e5b473e604080850191909152731f98431c8ad98523631ae4a59f267346ea31f98460608086019190915273e592427a0aece92de3edee1f18e0157c0586156460808087019190915273af88d065e77c8cc2239327c5edb3a432268e583160a08088019190915273fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb960c08089019190915273da10009cbd5d07dd0cecc66161fc93d7c9000da160e0808a01919091527382af49447d8a07e3bd95bd0d56f35241523fbab1610100998a01528951600d5595890151600e80546001600160a01b0319908116928a1692909217905594890151600f8054871691891691909117905592880151601080548616918816919091179055908701516011805485169187169190911790558601516012805484169186169190911790558501516013805483169185169190911790559084015160148054831691841691909117905591830151601580548416918316919091179055610120909201516016805490921692169190911790555061094c565b466001036105de5760405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152600090600080516020610c8e8339815191529063c1978d1f90606401602060405180830381865afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190610903565b604080516101408101825282815290516001625e79b760e01b0319815260048101839052919250906020820190600080516020610c8e8339815191529063ffa1864990602401602060405180830381865afa1580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610422919061091c565b6001600160a01b039081168252737d2768de32b0b80b7a3454c06bdac94a69ddc7a9602080840191909152738164cc65827dcfe994ab23944cbc90e0aa80bfcb604080850191909152731f98431c8ad98523631ae4a59f267346ea31f98460608086019190915273e592427a0aece92de3edee1f18e0157c0586156460808087019190915273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4860a08088019190915273dac17f958d2ee523a2206206994597c13d831ec760c080890191909152736b175474e89094c44da98b954eedeac495271d0f60e0808a019190915273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610100998a01528951600d5595890151600e80546001600160a01b0319908116928a1692909217905594890151600f8054871691891691909117905592880151601080548616918816919091179055908701516011805485169187169190911790558601516012805484169186169190911790558501516013805483169185169190911790559084015160148054831691841691909117905591830151601580548416918316919091179055610120909201516016805490921692169190911790555061094c565b4662aa36a7036108b75760405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152600090600080516020610c8e8339815191529063c1978d1f90606401602060405180830381865afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106749190610903565b604080516101408101825282815290516001625e79b760e01b0319815260048101839052919250906020820190600080516020610c8e8339815191529063ffa1864990602401602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb919061091c565b6001600160a01b039081168252736ae43d3271ff6888e7fc43fd7321a503ff738951602080840191909152734da5c4da71c5a167171cc839487536d86e083483604080850191909152731f98431c8ad98523631ae4a59f267346ea31f98460608086019190915273e592427a0aece92de3edee1f18e0157c058615646080808701919091527394a9d9ac8a22534e3faca9f4e7f2e2cf85d5e4c860a08088019190915273aa8e23fb1079ea71e0a56f48a2aa51851d8433d060c08089019190915273ff34b3d4aee8ddcd6f9afffb6fe49bd371b8a35760e0808a019190915273c558dbdd856501fcd9aaf1e62eae57a9f0629a3c610100998a01528951600d5595890151600e80546001600160a01b0319908116928a1692909217905594890151600f8054871691891691909117905592880151601080548616918816919091179055908701516011805485169187169190911790558601516012805484169186169190911790558501516013805483169185169190911790559084015160148054831691841691909117905591830151601580548416918316919091179055610120909201516016805490921692169190911790555061094c565b60405162461bcd60e51b815260206004820152601360248201527f556e737570706f72746564206e6574776f726b00000000000000000000000000604482015260640160405180910390fd5b60006020828403121561091557600080fd5b5051919050565b60006020828403121561092e57600080fd5b81516001600160a01b038116811461094557600080fd5b9392505050565b6103338061095b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a2d7c88e14610046578063d7b657451461012c578063f8ccbf47146101d3575b600080fd5b6101166040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152506040805161014081018252600d548152600e546001600160a01b039081166020830152600f548116928201929092526010548216606082015260115482166080820152601254821660a0820152601354821660c0820152601454821660e0820152601554821661010082015260165490911661012082015290565b60405161012391906101f6565b60405180910390f35b600d54600e54600f5460105460115460125460135460145460155460165461017499986001600160a01b0390811698811697811696811695811694811693811692811691168a565b604080519a8b526001600160a01b03998a1660208c0152978916978a01979097529487166060890152928616608088015290851660a0870152841660c0860152831660e085015282166101008401521661012082015261014001610123565b600c546101e69062010000900460ff1681565b6040519015158152602001610123565b8151815260208083015161014083019161021a908401826001600160a01b03169052565b50604083015161023560408401826001600160a01b03169052565b50606083015161025060608401826001600160a01b03169052565b50608083015161026b60808401826001600160a01b03169052565b5060a083015161028660a08401826001600160a01b03169052565b5060c08301516102a160c08401826001600160a01b03169052565b5060e08301516102bc60e08401826001600160a01b03169052565b506101008301516102d96101008401826001600160a01b03169052565b506101208301516102f66101208401826001600160a01b03169052565b509291505056fea2646970667358221220a91fbb3344db485b042940bbcba71470835b8a5ce1b4fd548de76eb9d59cba6764736f6c634300081a00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15a\0!W`\0\x80\xFD[PFa\xA4\xB1\x14\x80a\x003WPFazi\x14[\x15a\x03\x07W`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R`\0\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xA0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xC4\x91\x90a\t\x03V[`@\x80Qa\x01@\x81\x01\x82R\x82\x81R\x90Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x83\x90R\x91\x92P\x90` \x82\x01\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01'W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01K\x91\x90a\t\x1CV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82RsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD` \x80\x84\x01\x91\x90\x91Rs\x92\x9E\xC6L4\xA1t\x01\xF4`F\rK\x93\x90Q\x8E[G>`@\x80\x85\x01\x91\x90\x91Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84``\x80\x86\x01\x91\x90\x91Rs\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d`\x80\x80\x87\x01\x91\x90\x91Rs\xAF\x88\xD0e\xE7|\x8C\xC2#\x93'\xC5\xED\xB3\xA42&\x8EX1`\xA0\x80\x88\x01\x91\x90\x91Rs\xFD\x08k\xC7\xCD\\H\x1D\xCC\x9C\x85\xEB\xE4x\xA1\xC0\xB6\x9F\xCB\xB9`\xC0\x80\x89\x01\x91\x90\x91Rs\xDA\x10\0\x9C\xBD]\x07\xDD\x0C\xEC\xC6aa\xFC\x93\xD7\xC9\0\r\xA1`\xE0\x80\x8A\x01\x91\x90\x91Rs\x82\xAFID}\x8A\x07\xE3\xBD\x95\xBD\rV\xF3RAR?\xBA\xB1a\x01\0\x99\x8A\x01R\x89Q`\rU\x95\x89\x01Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x92\x8A\x16\x92\x90\x92\x17\x90U\x94\x89\x01Q`\x0F\x80T\x87\x16\x91\x89\x16\x91\x90\x91\x17\x90U\x92\x88\x01Q`\x10\x80T\x86\x16\x91\x88\x16\x91\x90\x91\x17\x90U\x90\x87\x01Q`\x11\x80T\x85\x16\x91\x87\x16\x91\x90\x91\x17\x90U\x86\x01Q`\x12\x80T\x84\x16\x91\x86\x16\x91\x90\x91\x17\x90U\x85\x01Q`\x13\x80T\x83\x16\x91\x85\x16\x91\x90\x91\x17\x90U\x90\x84\x01Q`\x14\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91\x83\x01Q`\x15\x80T\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90Ua\x01 \x90\x92\x01Q`\x16\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UPa\tLV[F`\x01\x03a\x05\xDEW`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R`\0\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03wW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\x9B\x91\x90a\t\x03V[`@\x80Qa\x01@\x81\x01\x82R\x82\x81R\x90Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x83\x90R\x91\x92P\x90` \x82\x01\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xFEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\"\x91\x90a\t\x1CV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82Rs}'h\xDE2\xB0\xB8\x0Bz4T\xC0k\xDA\xC9Ji\xDD\xC7\xA9` \x80\x84\x01\x91\x90\x91Rs\x81d\xCCe\x82}\xCF\xE9\x94\xAB#\x94L\xBC\x90\xE0\xAA\x80\xBF\xCB`@\x80\x85\x01\x91\x90\x91Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84``\x80\x86\x01\x91\x90\x91Rs\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d`\x80\x80\x87\x01\x91\x90\x91Rs\xA0\xB8i\x91\xC6!\x8B6\xC1\xD1\x9DJ.\x9E\xB0\xCE6\x06\xEBH`\xA0\x80\x88\x01\x91\x90\x91Rs\xDA\xC1\x7F\x95\x8D.\xE5#\xA2 b\x06\x99E\x97\xC1=\x83\x1E\xC7`\xC0\x80\x89\x01\x91\x90\x91Rsk\x17Tt\xE8\x90\x94\xC4M\xA9\x8B\x95N\xED\xEA\xC4\x95'\x1D\x0F`\xE0\x80\x8A\x01\x91\x90\x91Rs\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2a\x01\0\x99\x8A\x01R\x89Q`\rU\x95\x89\x01Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x92\x8A\x16\x92\x90\x92\x17\x90U\x94\x89\x01Q`\x0F\x80T\x87\x16\x91\x89\x16\x91\x90\x91\x17\x90U\x92\x88\x01Q`\x10\x80T\x86\x16\x91\x88\x16\x91\x90\x91\x17\x90U\x90\x87\x01Q`\x11\x80T\x85\x16\x91\x87\x16\x91\x90\x91\x17\x90U\x86\x01Q`\x12\x80T\x84\x16\x91\x86\x16\x91\x90\x91\x17\x90U\x85\x01Q`\x13\x80T\x83\x16\x91\x85\x16\x91\x90\x91\x17\x90U\x90\x84\x01Q`\x14\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91\x83\x01Q`\x15\x80T\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90Ua\x01 \x90\x92\x01Q`\x16\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UPa\tLV[Fb\xAA6\xA7\x03a\x08\xB7W`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R`\0\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06PW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06t\x91\x90a\t\x03V[`@\x80Qa\x01@\x81\x01\x82R\x82\x81R\x90Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x83\x90R\x91\x92P\x90` \x82\x01\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06\xD7W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xFB\x91\x90a\t\x1CV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82Rsj\xE4=2q\xFFh\x88\xE7\xFCC\xFDs!\xA5\x03\xFFs\x89Q` \x80\x84\x01\x91\x90\x91RsM\xA5\xC4\xDAq\xC5\xA1g\x17\x1C\xC89Hu6\xD8n\x084\x83`@\x80\x85\x01\x91\x90\x91Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84``\x80\x86\x01\x91\x90\x91Rs\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d`\x80\x80\x87\x01\x91\x90\x91Rs\x94\xA9\xD9\xAC\x8A\"SN?\xAC\xA9\xF4\xE7\xF2\xE2\xCF\x85\xD5\xE4\xC8`\xA0\x80\x88\x01\x91\x90\x91Rs\xAA\x8E#\xFB\x10y\xEAq\xE0\xA5oH\xA2\xAAQ\x85\x1D\x843\xD0`\xC0\x80\x89\x01\x91\x90\x91Rs\xFF4\xB3\xD4\xAE\xE8\xDD\xCDo\x9A\xFF\xFBo\xE4\x9B\xD3q\xB8\xA3W`\xE0\x80\x8A\x01\x91\x90\x91Rs\xC5X\xDB\xDD\x85e\x01\xFC\xD9\xAA\xF1\xE6.\xAEW\xA9\xF0b\x9A<a\x01\0\x99\x8A\x01R\x89Q`\rU\x95\x89\x01Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x92\x8A\x16\x92\x90\x92\x17\x90U\x94\x89\x01Q`\x0F\x80T\x87\x16\x91\x89\x16\x91\x90\x91\x17\x90U\x92\x88\x01Q`\x10\x80T\x86\x16\x91\x88\x16\x91\x90\x91\x17\x90U\x90\x87\x01Q`\x11\x80T\x85\x16\x91\x87\x16\x91\x90\x91\x17\x90U\x86\x01Q`\x12\x80T\x84\x16\x91\x86\x16\x91\x90\x91\x17\x90U\x85\x01Q`\x13\x80T\x83\x16\x91\x85\x16\x91\x90\x91\x17\x90U\x90\x84\x01Q`\x14\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91\x83\x01Q`\x15\x80T\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90Ua\x01 \x90\x92\x01Q`\x16\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UPa\tLV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUnsupported network\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[`\0` \x82\x84\x03\x12\x15a\t\x15W`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\t.W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\tEW`\0\x80\xFD[\x93\x92PPPV[a\x033\x80a\t[`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\xA2\xD7\xC8\x8E\x14a\0FW\x80c\xD7\xB6WE\x14a\x01,W\x80c\xF8\xCC\xBFG\x14a\x01\xD3W[`\0\x80\xFD[a\x01\x16`@\x80Qa\x01@\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x91\x90\x91RP`@\x80Qa\x01@\x81\x01\x82R`\rT\x81R`\x0ET`\x01`\x01`\xA0\x1B\x03\x90\x81\x16` \x83\x01R`\x0FT\x81\x16\x92\x82\x01\x92\x90\x92R`\x10T\x82\x16``\x82\x01R`\x11T\x82\x16`\x80\x82\x01R`\x12T\x82\x16`\xA0\x82\x01R`\x13T\x82\x16`\xC0\x82\x01R`\x14T\x82\x16`\xE0\x82\x01R`\x15T\x82\x16a\x01\0\x82\x01R`\x16T\x90\x91\x16a\x01 \x82\x01R\x90V[`@Qa\x01#\x91\x90a\x01\xF6V[`@Q\x80\x91\x03\x90\xF3[`\rT`\x0ET`\x0FT`\x10T`\x11T`\x12T`\x13T`\x14T`\x15T`\x16Ta\x01t\x99\x98`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x98\x81\x16\x97\x81\x16\x96\x81\x16\x95\x81\x16\x94\x81\x16\x93\x81\x16\x92\x81\x16\x91\x16\x8AV[`@\x80Q\x9A\x8BR`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16` \x8C\x01R\x97\x89\x16\x97\x8A\x01\x97\x90\x97R\x94\x87\x16``\x89\x01R\x92\x86\x16`\x80\x88\x01R\x90\x85\x16`\xA0\x87\x01R\x84\x16`\xC0\x86\x01R\x83\x16`\xE0\x85\x01R\x82\x16a\x01\0\x84\x01R\x16a\x01 \x82\x01Ra\x01@\x01a\x01#V[`\x0CTa\x01\xE6\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01#V[\x81Q\x81R` \x80\x83\x01Qa\x01@\x83\x01\x91a\x02\x1A\x90\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`@\x83\x01Qa\x025`@\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P``\x83\x01Qa\x02P``\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\x80\x83\x01Qa\x02k`\x80\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xA0\x83\x01Qa\x02\x86`\xA0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xC0\x83\x01Qa\x02\xA1`\xC0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xE0\x83\x01Qa\x02\xBC`\xE0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[Pa\x01\0\x83\x01Qa\x02\xD9a\x01\0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[Pa\x01 \x83\x01Qa\x02\xF6a\x01 \x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xA9\x1F\xBB3D\xDBH[\x04)@\xBB\xCB\xA7\x14p\x83[\x8A\\\xE1\xB4\xFDT\x8D\xE7n\xB9\xD5\x9C\xBAgdsolcC\0\x08\x1A\x003\0\0\0\0\0\0\0\0\0\0\0\0q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063a2d7c88e14610046578063d7b657451461012c578063f8ccbf47146101d3575b600080fd5b6101166040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152506040805161014081018252600d548152600e546001600160a01b039081166020830152600f548116928201929092526010548216606082015260115482166080820152601254821660a0820152601354821660c0820152601454821660e0820152601554821661010082015260165490911661012082015290565b60405161012391906101f6565b60405180910390f35b600d54600e54600f5460105460115460125460135460145460155460165461017499986001600160a01b0390811698811697811696811695811694811693811692811691168a565b604080519a8b526001600160a01b03998a1660208c0152978916978a01979097529487166060890152928616608088015290851660a0870152841660c0860152831660e085015282166101008401521661012082015261014001610123565b600c546101e69062010000900460ff1681565b6040519015158152602001610123565b8151815260208083015161014083019161021a908401826001600160a01b03169052565b50604083015161023560408401826001600160a01b03169052565b50606083015161025060608401826001600160a01b03169052565b50608083015161026b60808401826001600160a01b03169052565b5060a083015161028660a08401826001600160a01b03169052565b5060c08301516102a160c08401826001600160a01b03169052565b5060e08301516102bc60e08401826001600160a01b03169052565b506101008301516102d96101008401826001600160a01b03169052565b506101208301516102f66101208401826001600160a01b03169052565b509291505056fea2646970667358221220a91fbb3344db485b042940bbcba71470835b8a5ce1b4fd548de76eb9d59cba6764736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\xA2\xD7\xC8\x8E\x14a\0FW\x80c\xD7\xB6WE\x14a\x01,W\x80c\xF8\xCC\xBFG\x14a\x01\xD3W[`\0\x80\xFD[a\x01\x16`@\x80Qa\x01@\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x91\x90\x91RP`@\x80Qa\x01@\x81\x01\x82R`\rT\x81R`\x0ET`\x01`\x01`\xA0\x1B\x03\x90\x81\x16` \x83\x01R`\x0FT\x81\x16\x92\x82\x01\x92\x90\x92R`\x10T\x82\x16``\x82\x01R`\x11T\x82\x16`\x80\x82\x01R`\x12T\x82\x16`\xA0\x82\x01R`\x13T\x82\x16`\xC0\x82\x01R`\x14T\x82\x16`\xE0\x82\x01R`\x15T\x82\x16a\x01\0\x82\x01R`\x16T\x90\x91\x16a\x01 \x82\x01R\x90V[`@Qa\x01#\x91\x90a\x01\xF6V[`@Q\x80\x91\x03\x90\xF3[`\rT`\x0ET`\x0FT`\x10T`\x11T`\x12T`\x13T`\x14T`\x15T`\x16Ta\x01t\x99\x98`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x98\x81\x16\x97\x81\x16\x96\x81\x16\x95\x81\x16\x94\x81\x16\x93\x81\x16\x92\x81\x16\x91\x16\x8AV[`@\x80Q\x9A\x8BR`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16` \x8C\x01R\x97\x89\x16\x97\x8A\x01\x97\x90\x97R\x94\x87\x16``\x89\x01R\x92\x86\x16`\x80\x88\x01R\x90\x85\x16`\xA0\x87\x01R\x84\x16`\xC0\x86\x01R\x83\x16`\xE0\x85\x01R\x82\x16a\x01\0\x84\x01R\x16a\x01 \x82\x01Ra\x01@\x01a\x01#V[`\x0CTa\x01\xE6\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01#V[\x81Q\x81R` \x80\x83\x01Qa\x01@\x83\x01\x91a\x02\x1A\x90\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`@\x83\x01Qa\x025`@\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P``\x83\x01Qa\x02P``\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\x80\x83\x01Qa\x02k`\x80\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xA0\x83\x01Qa\x02\x86`\xA0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xC0\x83\x01Qa\x02\xA1`\xC0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xE0\x83\x01Qa\x02\xBC`\xE0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[Pa\x01\0\x83\x01Qa\x02\xD9a\x01\0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[Pa\x01 \x83\x01Qa\x02\xF6a\x01 \x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xA9\x1F\xBB3D\xDBH[\x04)@\xBB\xCB\xA7\x14p\x83[\x8A\\\xE1\xB4\xFDT\x8D\xE7n\xB9\xD5\x9C\xBAgdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct NetworkConfig { uint256 deployerKey; address deployerAddress; address aaveLendingPool; address aaveIncentives; address uniswapV3Factory; address uniswapV3Router; address usdc; address usdt; address dai; address weth; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NetworkConfig {
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub deployerAddress: alloy::sol_types::private::Address,
        pub aaveLendingPool: alloy::sol_types::private::Address,
        pub aaveIncentives: alloy::sol_types::private::Address,
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        pub uniswapV3Router: alloy::sol_types::private::Address,
        pub usdc: alloy::sol_types::private::Address,
        pub usdt: alloy::sol_types::private::Address,
        pub dai: alloy::sol_types::private::Address,
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NetworkConfig> for UnderlyingRustTuple<'_> {
            fn from(value: NetworkConfig) -> Self {
                (
                    value.deployerKey,
                    value.deployerAddress,
                    value.aaveLendingPool,
                    value.aaveIncentives,
                    value.uniswapV3Factory,
                    value.uniswapV3Router,
                    value.usdc,
                    value.usdt,
                    value.dai,
                    value.weth,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NetworkConfig {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    deployerKey: tuple.0,
                    deployerAddress: tuple.1,
                    aaveLendingPool: tuple.2,
                    aaveIncentives: tuple.3,
                    uniswapV3Factory: tuple.4,
                    uniswapV3Router: tuple.5,
                    usdc: tuple.6,
                    usdt: tuple.7,
                    dai: tuple.8,
                    weth: tuple.9,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for NetworkConfig {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for NetworkConfig {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deployerKey),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.deployerAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aaveLendingPool,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aaveIncentives,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Factory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdc,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdt,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.dai,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.weth,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for NetworkConfig {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for NetworkConfig {
            const NAME: &'static str = "NetworkConfig";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "NetworkConfig(uint256 deployerKey,address deployerAddress,address aaveLendingPool,address aaveIncentives,address uniswapV3Factory,address uniswapV3Router,address usdc,address usdt,address dai,address weth)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.deployerKey)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.deployerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aaveLendingPool,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aaveIncentives,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Factory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Router,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdc,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdt,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.dai,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.weth,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for NetworkConfig {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerKey,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aaveLendingPool,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aaveIncentives,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Factory,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Router,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdc,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdt,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.dai,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.weth,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aaveLendingPool,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aaveIncentives,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Factory,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Router,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdc,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdt,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.dai,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.weth,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activeNetworkConfig()` and selector `0xd7b65745`.
```solidity
function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address aaveIncentives, address uniswapV3Factory, address uniswapV3Router, address usdc, address usdt, address dai, address weth);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct activeNetworkConfigCall {}
    ///Container type for the return parameters of the [`activeNetworkConfig()`](activeNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct activeNetworkConfigReturn {
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub deployerAddress: alloy::sol_types::private::Address,
        pub aaveLendingPool: alloy::sol_types::private::Address,
        pub aaveIncentives: alloy::sol_types::private::Address,
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        pub uniswapV3Router: alloy::sol_types::private::Address,
        pub usdc: alloy::sol_types::private::Address,
        pub usdt: alloy::sol_types::private::Address,
        pub dai: alloy::sol_types::private::Address,
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigReturn) -> Self {
                    (
                        value.deployerKey,
                        value.deployerAddress,
                        value.aaveLendingPool,
                        value.aaveIncentives,
                        value.uniswapV3Factory,
                        value.uniswapV3Router,
                        value.usdc,
                        value.usdt,
                        value.dai,
                        value.weth,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deployerKey: tuple.0,
                        deployerAddress: tuple.1,
                        aaveLendingPool: tuple.2,
                        aaveIncentives: tuple.3,
                        uniswapV3Factory: tuple.4,
                        uniswapV3Router: tuple.5,
                        usdc: tuple.6,
                        usdt: tuple.7,
                        dai: tuple.8,
                        weth: tuple.9,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activeNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activeNetworkConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activeNetworkConfig()";
            const SELECTOR: [u8; 4] = [215u8, 182u8, 87u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getActiveNetworkConfig()` and selector `0xa2d7c88e`.
```solidity
function getActiveNetworkConfig() external view returns (NetworkConfig memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigCall {}
    ///Container type for the return parameters of the [`getActiveNetworkConfig()`](getActiveNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigReturn {
        pub _0: <NetworkConfig as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (NetworkConfig,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <NetworkConfig as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getActiveNetworkConfigReturn;
            type ReturnTuple<'a> = (NetworkConfig,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveNetworkConfig()";
            const SELECTOR: [u8; 4] = [162u8, 215u8, 200u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HelperConfig`](self) function calls.
    pub enum HelperConfigCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        activeNetworkConfig(activeNetworkConfigCall),
        getActiveNetworkConfig(getActiveNetworkConfigCall),
    }
    #[automatically_derived]
    impl HelperConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [162u8, 215u8, 200u8, 142u8],
            [215u8, 182u8, 87u8, 69u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HelperConfigCalls {
        const NAME: &'static str = "HelperConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activeNetworkConfig(_) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveNetworkConfig(_) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<HelperConfigCalls>] = &[
                {
                    fn getActiveNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::getActiveNetworkConfig)
                    }
                    getActiveNetworkConfig
                },
                {
                    fn activeNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::activeNetworkConfig)
                    }
                    activeNetworkConfig
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HelperConfigInstance<T, P, N> {
        HelperConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HelperConfigInstance<T, P, N>>,
    > {
        HelperConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        HelperConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`HelperConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HelperConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HelperConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for HelperConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HelperConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HelperConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> HelperConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HelperConfigInstance<T, P, N> {
            HelperConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`activeNetworkConfig`] function.
        pub fn activeNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, activeNetworkConfigCall, N> {
            self.call_builder(&activeNetworkConfigCall {})
        }
        ///Creates a new call builder for the [`getActiveNetworkConfig`] function.
        pub fn getActiveNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getActiveNetworkConfigCall, N> {
            self.call_builder(&getActiveNetworkConfigCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
