/**

Generated by the following Solidity interface...
```solidity
interface GetPosition {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetPosition {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040819052600c805462ff00ff19166201000117905561002090610a51565b604051809103906000f08015801561003c573d6000803e3d6000fd5b50600c80546001600160a01b03929092166301000000026301000000600160b81b031990921691909117905560408051808201909152600a81526920b0bb32a637b7b832b960b11b602082015261009390466100c5565b600d80546001600160a01b0319166001600160a01b03929092169190911790553480156100bf57600080fd5b50611077565b60006100fb83836040518060400160405280600b81526020016a0b8bd89c9bd85918d85cdd60aa1b81525061010460201b60201c565b90505b92915050565b604051630525e1db60e21b81526000908190819081908190600080516020612c4283398151915290631497876c90610143908990600390600401610aae565b600060405180830381865afa158015610160573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101889190810190610bc6565b905060005b81518110156103f65760008282815181106101aa576101aa610d3e565b602090810291909101015160405163348051d760e11b8152600481018b905290915061025990600080516020612c4283398151915290636900a3ae90602401600060405180830381865afa158015610206573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261022e9190810190610d54565b60405160200161023e9190610d88565b60408051601f1981840301815291905260208301519061053c565b801561028c5750604080518082019091526005815264173539b7b760d91b60208083019190915282015161028c9161053c565b80156102c3575060408051808201909152600781526632393c96b93ab760c91b6020808301919091528201516102c19161053c565b155b156103ed5760208101516040516360f9bb1160e01b815260019550600091600080516020612c42833981519152916360f9bb119161030391600401610dbc565b600060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103489190810190610d54565b6040516356eef15b60e11b8152909150600090600080516020612c428339815191529063addde2b69061037f908590600401610dcf565b602060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c09190610e0e565b9050868111156103ea576103d5828d8a61061b565b97506001600160a01b038816156103ea578096505b50505b5060010161018d565b508161046f5760405162461bcd60e51b815260206004820152603660248201527f4e6f206465706c6f796d656e7420617274696661637473207765726520666f7560448201527f6e6420666f722073706563696669656420636861696e0000000000000000000060648201526084015b60405180910390fd5b6001600160a01b0384161561048a5783945050505050610535565b60405163348051d760e11b8152600481018890528890600080516020612c4283398151915290636900a3ae90602401600060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104fe9190810190610d54565b60405160200161050f929190610e27565b60408051601f198184030181529082905262461bcd60e51b825261046691600401610dbc565b9392505050565b8051825160009184918491118061055257508151155b15610562576000925050506100fe565b60005b815183516105739190610ec7565b811161060f57600160005b83518110156105e85783818151811061059957610599610d3e565b01602001516001600160f81b031916856105b38386610eda565b815181106105c3576105c3610d3e565b01602001516001600160f81b031916146105e057600091506105e8565b60010161057e565b5080156105fc5760019450505050506100fe565b508061060781610eed565b915050610565565b50600095945050505050565b6000805b60405163348051d760e11b815260048101829052600080516020612c428339815191529063db4235f69087908390636900a3ae90602401600060405180830381865afa158015610673573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261069b9190810190610d54565b6040516020016106ab9190610f06565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016106d7929190610f48565b602060405180830381865afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190610f76565b156108fd5760405163348051d760e11b815260048101829052600090600080516020612c4283398151915290636900a3ae90602401600060405180830381865afa15801561076a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107929190810190610d54565b6040516020016107a29190610f91565b60408051601f1981840301815290829052636da11afb60e11b82529150600080516020612c428339815191529063db4235f6906107e59089908590600401610f48565b602060405180830381865afa158015610802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190610f76565b156108ea5760006108378783610906565b90506108438187610981565b156108e85760405163348051d760e11b8152600481018490526108e590600080516020612c4283398151915290636900a3ae90602401600060405180830381865afa158015610896573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108be9190810190610d54565b6040516020016108ce9190610fe0565b60408051601f1981840301815291905288906109da565b94505b505b50806108f581610eed565b91505061061f565b50909392505050565b6040516309389f5960e31b8152606090600080516020612c42833981519152906349c4fac89061093c9086908690600401610f48565b600060405180830381865afa158015610959573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100fb9190810190610d54565b6000816040516020016109949190611032565b60405160208183030381529060405280519060200120836040516020016109bb9190611032565b6040516020818303038152906040528051906020012014905092915050565b604051631e19e65760e01b8152600090600080516020612c4283398151915290631e19e65790610a109086908690600401610f48565b602060405180830381865afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061104e565b610cae80611f9483390190565b60005b83811015610a79578181015183820152602001610a61565b50506000910152565b60008151808452610a9a816020860160208601610a5e565b601f01601f19169290920160200192915050565b604081526000610ac16040830185610a82565b905060018060401b03831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610b1057610b10610ad8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610b3e57610b3e610ad8565b604052919050565b600082601f830112610b5757600080fd5b81516001600160401b03811115610b7057610b70610ad8565b610b83601f8201601f1916602001610b16565b818152846020838601011115610b9857600080fd5b610ba9826020830160208701610a5e565b949350505050565b80518015158114610bc157600080fd5b919050565b600060208284031215610bd857600080fd5b81516001600160401b03811115610bee57600080fd5b8201601f81018413610bff57600080fd5b80516001600160401b03811115610c1857610c18610ad8565b8060051b610c2860208201610b16565b91825260208184018101929081019087841115610c4457600080fd5b6020850192505b83831015610d335782516001600160401b03811115610c6957600080fd5b850160a0818a03601f19011215610c7f57600080fd5b610c87610aee565b60208201516001600160401b03811115610ca057600080fd5b610caf8b602083860101610b46565b82525060408201516001600160401b03811115610ccb57600080fd5b610cda8b602083860101610b46565b60208301525060608201516001600160401b0381168114610cfa57600080fd5b6040820152610d0b60808301610bb1565b6060820152610d1c60a08301610bb1565b608082015283525060209283019290910190610c4b565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d6657600080fd5b81516001600160401b03811115610d7c57600080fd5b610ba984828501610b46565b602f60f81b815260008251610da4816001850160208701610a5e565b602f60f81b6001939091019283015250600201919050565b6020815260006100fb6020830184610a82565b604081526000610de26040830184610a82565b8281036020840152600a81526902e74696d657374616d760b41b60208201526040810191505092915050565b600060208284031215610e2057600080fd5b5051919050565b71027379031b7b73a3930b1ba103730b6b2b2160751b8152602760f81b601282015260008351610e5e816013850160208801610a5e565b602760f81b6013918401918201527f20686173206265656e206465706c6f796564206f6e20636861696e200000000060148201528351610ea5816030840160208801610a5e565b01603001949350505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156100fe576100fe610eb1565b808201808211156100fe576100fe610eb1565b600060018201610eff57610eff610eb1565b5060010190565b6e242e7472616e73616374696f6e735b60881b815260008251610f3081600f850160208701610a5e565b605d60f81b600f939091019283015250601001919050565b604081526000610f5b6040830185610a82565b8281036020840152610f6d8185610a82565b95945050505050565b600060208284031215610f8857600080fd5b6100fb82610bb1565b6e242e7472616e73616374696f6e735b60881b815260008251610fbb81600f850160208701610a5e565b6d5d2e636f6e74726163744e616d6560901b600f939091019283015250601d01919050565b6e242e7472616e73616374696f6e735b60881b81526000825161100a81600f850160208701610a5e565b705d2e636f6e74726163744164647265737360781b600f939091019283015250602001919050565b60008251611044818460208701610a5e565b9190910192915050565b60006020828403121561106057600080fd5b81516001600160a01b038116811461053557600080fd5b610f0e806110866000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c04062261461003b578063f8ccbf4714610045575b600080fd5b61004361006c565b005b600c546100589062010000900460ff1681565b604051901515815260200160405180910390f35b600d54600c546040805163516be44760e11b815290516001600160a01b039384169360009363010000009004169163a2d7c88e916004808301926101409291908290030181865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e99190610a8c565b9050600080600080600080876001600160a01b031663e8f379636040518163ffffffff1660e01b815260040160c060405180830381865afa158015610132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101569190610b51565b60c08d0151604080516301587f9560e61b81526004810191909152600c60448201526b14d55414131657d054d4d15560a21b60648201526001600160a01b039091166024820152959b50939950919750955093509150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063561fe54090608401602060405180830381865afa1580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c9190610b9b565b600e80546001600160a01b0319166001600160a01b03928316179055610120880151604080516301587f9560e61b81526004810191909152600c60448201526b1093d49493d5d7d054d4d15560a21b606482015291166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063561fe54090608401602060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610b9b565b600f80546001600160a01b0319166001600160a01b039283169081179091556040516370a0823160e01b8152918a1660048301526000916370a0823190602401602060405180830381865afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103489190610bbd565b600e546040516370a0823160e01b81526001600160a01b038c81166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190610bbd565b905060006103cb83601261070f565b905060006103da83600661070f565b600f546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610bbd565b600e546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190610bbd565b905060006104cd83601261070f565b905060006104dc83600661070f565b905060006104eb8f600861070f565b905060006104fa8f600861070f565b905060006105098f600861070f565b60408051808201909152601181527021b7b73a3930b1ba1030b2323932b9b99d60791b6020820152600d54919250610549916001600160a01b03166107b7565b61056b604051806060016040528060258152602001610e4d602591398a610800565b61058d604051806060016040528060258152602001610eb46025913989610800565b6105af604051806060016040528060218152602001610e726021913986610800565b6105d1604051806060016040528060218152602001610e936021913985610800565b610604604051806040016040528060118152602001702a37ba30b61031b7b63630ba32b930b61d60791b81525084610800565b6106316040518060400160405280600b81526020016a2a37ba30b6103232b13a1d60a91b81525083610800565b6106656040518060400160405280601281526020017120bb30b4b630b13632903137b93937bbb99d60711b81525082610800565b6106a46040518060400160405280601e81526020017f43757272656e74206c69717569646174696f6e207468726573686f6c643a00008152508f610845565b6106ca60405180604001604052806004815260200163262a2b1d60e11b8152508e610845565b6106fa6040518060400160405280600e81526020016d2432b0b63a34103330b1ba37b91d60911b8152508d610845565b50505050505050505050505050505050505050565b6060600061071e83600a610cd3565b9050600061072c8286610cf5565b9050600061073a8387610d09565b905060006107478361088a565b905060006107548361088a565b90505b868151101561078757806040516020016107719190610d41565b6040516020818303038152906040529050610757565b818160405160200161079a929190610d6a565b604051602081830303815290604052955050505050505b92915050565b6107fc82826040516024016107cd929190610dd2565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261091d565b5050565b6107fc8282604051602401610816929190610dfc565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b17905261091d565b6107fc828260405160240161085b929190610e2a565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261091d565b6060600061089783610929565b600101905060008167ffffffffffffffff8111156108b7576108b7610a22565b6040519080825280601f01601f1916602001820160405280156108e1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846108eb57509392505050565b61092681610a01565b50565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106109685772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610994576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106109b257662386f26fc10000830492506010015b6305f5e10083106109ca576305f5e100830492506008015b61271083106109de57612710830492506004015b606483106109f0576064830492506002015b600a83106107b15760010192915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610a6a57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114610a8757600080fd5b919050565b6000610140828403128015610aa057600080fd5b50610aa9610a38565b82518152610ab960208401610a70565b6020820152610aca60408401610a70565b6040820152610adb60608401610a70565b6060820152610aec60808401610a70565b6080820152610afd60a08401610a70565b60a0820152610b0e60c08401610a70565b60c0820152610b1f60e08401610a70565b60e0820152610b316101008401610a70565b610100820152610b446101208401610a70565b6101208201529392505050565b60008060008060008060c08789031215610b6a57600080fd5b50508451602086015160408701516060880151608089015160a090990151939a929950909790965094509092509050565b600060208284031215610bad57600080fd5b610bb682610a70565b9392505050565b600060208284031215610bcf57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001815b6001841115610c2757808504811115610c0b57610c0b610bd6565b6001841615610c1957908102905b60019390931c928002610bf0565b935093915050565b600082610c3e575060016107b1565b81610c4b575060006107b1565b8160018114610c615760028114610c6b57610c87565b60019150506107b1565b60ff841115610c7c57610c7c610bd6565b50506001821b6107b1565b5060208310610133831016604e8410600b8410161715610caa575081810a6107b1565b610cb76000198484610bec565b8060001904821115610ccb57610ccb610bd6565b029392505050565b6000610bb68383610c2f565b634e487b7160e01b600052601260045260246000fd5b600082610d0457610d04610cdf565b500490565b600082610d1857610d18610cdf565b500690565b60005b83811015610d38578181015183820152602001610d20565b50506000910152565b600360fc1b815260008251610d5d816001850160208701610d1d565b9190910160010192915050565b60008351610d7c818460208801610d1d565b601760f91b9083019081528351610d9a816001840160208801610d1d565b01600101949350505050565b60008151808452610dbe816020860160208601610d1d565b601f01601f19169290920160200192915050565b604081526000610de56040830185610da6565b905060018060a01b03831660208301529392505050565b604081526000610e0f6040830185610da6565b8281036020840152610e218185610da6565b95945050505050565b604081526000610e3d6040830185610da6565b9050826020830152939250505056fe426f72726f7720617373657420636f6e74726163742062616c616e6365202857455448293a426f72726f7720617373657420757365722062616c616e6365202857455448293a537570706c7920617373657420757365722062616c616e6365202855534443293a537570706c7920617373657420636f6e74726163742062616c616e6365202855534443293aa26469706673582212202a58193f6972624e14d64ef66c7e84d71510b01b025bc1bd44b3073658ecfb2064736f6c634300081a00336080604052600c805462ff00ff19166201000117905534801561002157600080fd5b504661a4b11480610033575046617a69145b156103075760405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152600090600080516020610c8e8339815191529063c1978d1f90606401602060405180830381865afa1580156100a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c49190610903565b604080516101408101825282815290516001625e79b760e01b0319815260048101839052919250906020820190600080516020610c8e8339815191529063ffa1864990602401602060405180830381865afa158015610127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014b919061091c565b6001600160a01b03908116825273794a61358d6845594f94dc1db02a252b5b4814ad60208084019190915273929ec64c34a17401f460460d4b9390518e5b473e604080850191909152731f98431c8ad98523631ae4a59f267346ea31f98460608086019190915273e592427a0aece92de3edee1f18e0157c0586156460808087019190915273af88d065e77c8cc2239327c5edb3a432268e583160a08088019190915273fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb960c08089019190915273da10009cbd5d07dd0cecc66161fc93d7c9000da160e0808a01919091527382af49447d8a07e3bd95bd0d56f35241523fbab1610100998a01528951600d5595890151600e80546001600160a01b0319908116928a1692909217905594890151600f8054871691891691909117905592880151601080548616918816919091179055908701516011805485169187169190911790558601516012805484169186169190911790558501516013805483169185169190911790559084015160148054831691841691909117905591830151601580548416918316919091179055610120909201516016805490921692169190911790555061094c565b466001036105de5760405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152600090600080516020610c8e8339815191529063c1978d1f90606401602060405180830381865afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190610903565b604080516101408101825282815290516001625e79b760e01b0319815260048101839052919250906020820190600080516020610c8e8339815191529063ffa1864990602401602060405180830381865afa1580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610422919061091c565b6001600160a01b039081168252737d2768de32b0b80b7a3454c06bdac94a69ddc7a9602080840191909152738164cc65827dcfe994ab23944cbc90e0aa80bfcb604080850191909152731f98431c8ad98523631ae4a59f267346ea31f98460608086019190915273e592427a0aece92de3edee1f18e0157c0586156460808087019190915273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4860a08088019190915273dac17f958d2ee523a2206206994597c13d831ec760c080890191909152736b175474e89094c44da98b954eedeac495271d0f60e0808a019190915273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610100998a01528951600d5595890151600e80546001600160a01b0319908116928a1692909217905594890151600f8054871691891691909117905592880151601080548616918816919091179055908701516011805485169187169190911790558601516012805484169186169190911790558501516013805483169185169190911790559084015160148054831691841691909117905591830151601580548416918316919091179055610120909201516016805490921692169190911790555061094c565b4662aa36a7036108b75760405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152600090600080516020610c8e8339815191529063c1978d1f90606401602060405180830381865afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106749190610903565b604080516101408101825282815290516001625e79b760e01b0319815260048101839052919250906020820190600080516020610c8e8339815191529063ffa1864990602401602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb919061091c565b6001600160a01b039081168252736ae43d3271ff6888e7fc43fd7321a503ff738951602080840191909152734da5c4da71c5a167171cc839487536d86e083483604080850191909152731f98431c8ad98523631ae4a59f267346ea31f98460608086019190915273e592427a0aece92de3edee1f18e0157c058615646080808701919091527394a9d9ac8a22534e3faca9f4e7f2e2cf85d5e4c860a08088019190915273aa8e23fb1079ea71e0a56f48a2aa51851d8433d060c08089019190915273ff34b3d4aee8ddcd6f9afffb6fe49bd371b8a35760e0808a019190915273c558dbdd856501fcd9aaf1e62eae57a9f0629a3c610100998a01528951600d5595890151600e80546001600160a01b0319908116928a1692909217905594890151600f8054871691891691909117905592880151601080548616918816919091179055908701516011805485169187169190911790558601516012805484169186169190911790558501516013805483169185169190911790559084015160148054831691841691909117905591830151601580548416918316919091179055610120909201516016805490921692169190911790555061094c565b60405162461bcd60e51b815260206004820152601360248201527f556e737570706f72746564206e6574776f726b00000000000000000000000000604482015260640160405180910390fd5b60006020828403121561091557600080fd5b5051919050565b60006020828403121561092e57600080fd5b81516001600160a01b038116811461094557600080fd5b9392505050565b6103338061095b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a2d7c88e14610046578063d7b657451461012c578063f8ccbf47146101d3575b600080fd5b6101166040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152506040805161014081018252600d548152600e546001600160a01b039081166020830152600f548116928201929092526010548216606082015260115482166080820152601254821660a0820152601354821660c0820152601454821660e0820152601554821661010082015260165490911661012082015290565b60405161012391906101f6565b60405180910390f35b600d54600e54600f5460105460115460125460135460145460155460165461017499986001600160a01b0390811698811697811696811695811694811693811692811691168a565b604080519a8b526001600160a01b03998a1660208c0152978916978a01979097529487166060890152928616608088015290851660a0870152841660c0860152831660e085015282166101008401521661012082015261014001610123565b600c546101e69062010000900460ff1681565b6040519015158152602001610123565b8151815260208083015161014083019161021a908401826001600160a01b03169052565b50604083015161023560408401826001600160a01b03169052565b50606083015161025060608401826001600160a01b03169052565b50608083015161026b60808401826001600160a01b03169052565b5060a083015161028660a08401826001600160a01b03169052565b5060c08301516102a160c08401826001600160a01b03169052565b5060e08301516102bc60e08401826001600160a01b03169052565b506101008301516102d96101008401826001600160a01b03169052565b506101208301516102f66101208401826001600160a01b03169052565b509291505056fea2646970667358221220a91fbb3344db485b042940bbcba71470835b8a5ce1b4fd548de76eb9d59cba6764736f6c634300081a00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@\x81\x90R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90Ua\0 \x90a\nQV[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\0<W=`\0\x80>=`\0\xFD[P`\x0C\x80T`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16c\x01\0\0\0\x02c\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x90\x92\x16\x91\x90\x91\x17\x90U`@\x80Q\x80\x82\x01\x90\x91R`\n\x81Ri \xB0\xBB2\xA67\xB7\xB82\xB9`\xB1\x1B` \x82\x01Ra\0\x93\x90Fa\0\xC5V[`\r\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U4\x80\x15a\0\xBFW`\0\x80\xFD[Pa\x10wV[`\0a\0\xFB\x83\x83`@Q\x80`@\x01`@R\x80`\x0B\x81R` \x01j\x0B\x8B\xD8\x9C\x9B\xD8Y\x18\xD8\\\xDD`\xAA\x1B\x81RPa\x01\x04` \x1B` \x1CV[\x90P[\x92\x91PPV[`@Qc\x05%\xE1\xDB`\xE2\x1B\x81R`\0\x90\x81\x90\x81\x90\x81\x90\x81\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90c\x14\x97\x87l\x90a\x01C\x90\x89\x90`\x03\x90`\x04\x01a\n\xAEV[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01`W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01\x88\x91\x90\x81\x01\x90a\x0B\xC6V[\x90P`\0[\x81Q\x81\x10\x15a\x03\xF6W`\0\x82\x82\x81Q\x81\x10a\x01\xAAWa\x01\xAAa\r>V[` \x90\x81\x02\x91\x90\x91\x01\x01Q`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x8B\x90R\x90\x91Pa\x02Y\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x06W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02.\x91\x90\x81\x01\x90a\rTV[`@Q` \x01a\x02>\x91\x90a\r\x88V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x83\x01Q\x90a\x05<V[\x80\x15a\x02\x8CWP`@\x80Q\x80\x82\x01\x90\x91R`\x05\x81Rd\x1759\xB7\xB7`\xD9\x1B` \x80\x83\x01\x91\x90\x91R\x82\x01Qa\x02\x8C\x91a\x05<V[\x80\x15a\x02\xC3WP`@\x80Q\x80\x82\x01\x90\x91R`\x07\x81Rf29<\x96\xB9:\xB7`\xC9\x1B` \x80\x83\x01\x91\x90\x91R\x82\x01Qa\x02\xC1\x91a\x05<V[\x15[\x15a\x03\xEDW` \x81\x01Q`@Qc`\xF9\xBB\x11`\xE0\x1B\x81R`\x01\x95P`\0\x91`\0\x80Q` a,B\x839\x81Q\x91R\x91c`\xF9\xBB\x11\x91a\x03\x03\x91`\x04\x01a\r\xBCV[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03 W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x03H\x91\x90\x81\x01\x90a\rTV[`@QcV\xEE\xF1[`\xE1\x1B\x81R\x90\x91P`\0\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90c\xAD\xDD\xE2\xB6\x90a\x03\x7F\x90\x85\x90`\x04\x01a\r\xCFV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x9CW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC0\x91\x90a\x0E\x0EV[\x90P\x86\x81\x11\x15a\x03\xEAWa\x03\xD5\x82\x8D\x8Aa\x06\x1BV[\x97P`\x01`\x01`\xA0\x1B\x03\x88\x16\x15a\x03\xEAW\x80\x96P[PP[P`\x01\x01a\x01\x8DV[P\x81a\x04oW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`6`$\x82\x01R\x7FNo deployment artifacts were fou`D\x82\x01R\x7Fnd for specified chain\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x04\x8AW\x83\x94PPPPPa\x055V[`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x88\x90R\x88\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xD6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04\xFE\x91\x90\x81\x01\x90a\rTV[`@Q` \x01a\x05\x0F\x92\x91\x90a\x0E'V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90RbF\x1B\xCD`\xE5\x1B\x82Ra\x04f\x91`\x04\x01a\r\xBCV[\x93\x92PPPV[\x80Q\x82Q`\0\x91\x84\x91\x84\x91\x11\x80a\x05RWP\x81Q\x15[\x15a\x05bW`\0\x92PPPa\0\xFEV[`\0[\x81Q\x83Qa\x05s\x91\x90a\x0E\xC7V[\x81\x11a\x06\x0FW`\x01`\0[\x83Q\x81\x10\x15a\x05\xE8W\x83\x81\x81Q\x81\x10a\x05\x99Wa\x05\x99a\r>V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x85a\x05\xB3\x83\x86a\x0E\xDAV[\x81Q\x81\x10a\x05\xC3Wa\x05\xC3a\r>V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x14a\x05\xE0W`\0\x91Pa\x05\xE8V[`\x01\x01a\x05~V[P\x80\x15a\x05\xFCW`\x01\x94PPPPPa\0\xFEV[P\x80a\x06\x07\x81a\x0E\xEDV[\x91PPa\x05eV[P`\0\x95\x94PPPPPV[`\0\x80[`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`\0\x80Q` a,B\x839\x81Q\x91R\x90c\xDBB5\xF6\x90\x87\x90\x83\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06sW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x06\x9B\x91\x90\x81\x01\x90a\rTV[`@Q` \x01a\x06\xAB\x91\x90a\x0F\x06V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xD7\x92\x91\x90a\x0FHV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06\xF4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x18\x91\x90a\x0FvV[\x15a\x08\xFDW`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`\0\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07jW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07\x92\x91\x90\x81\x01\x90a\rTV[`@Q` \x01a\x07\xA2\x91\x90a\x0F\x91V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rcm\xA1\x1A\xFB`\xE1\x1B\x82R\x91P`\0\x80Q` a,B\x839\x81Q\x91R\x90c\xDBB5\xF6\x90a\x07\xE5\x90\x89\x90\x85\x90`\x04\x01a\x0FHV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\x02W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08&\x91\x90a\x0FvV[\x15a\x08\xEAW`\0a\x087\x87\x83a\t\x06V[\x90Pa\x08C\x81\x87a\t\x81V[\x15a\x08\xE8W`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x84\x90Ra\x08\xE5\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\x96W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x08\xBE\x91\x90\x81\x01\x90a\rTV[`@Q` \x01a\x08\xCE\x91\x90a\x0F\xE0V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x88\x90a\t\xDAV[\x94P[P[P\x80a\x08\xF5\x81a\x0E\xEDV[\x91PPa\x06\x1FV[P\x90\x93\x92PPPV[`@Qc\t8\x9FY`\xE3\x1B\x81R``\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90cI\xC4\xFA\xC8\x90a\t<\x90\x86\x90\x86\x90`\x04\x01a\x0FHV[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\tYW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\0\xFB\x91\x90\x81\x01\x90a\rTV[`\0\x81`@Q` \x01a\t\x94\x91\x90a\x102V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x83`@Q` \x01a\t\xBB\x91\x90a\x102V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x14\x90P\x92\x91PPV[`@Qc\x1E\x19\xE6W`\xE0\x1B\x81R`\0\x90`\0\x80Q` a,B\x839\x81Q\x91R\x90c\x1E\x19\xE6W\x90a\n\x10\x90\x86\x90\x86\x90`\x04\x01a\x0FHV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n-W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xFB\x91\x90a\x10NV[a\x0C\xAE\x80a\x1F\x94\x839\x01\x90V[`\0[\x83\x81\x10\x15a\nyW\x81\x81\x01Q\x83\x82\x01R` \x01a\naV[PP`\0\x91\x01RV[`\0\x81Q\x80\x84Ra\n\x9A\x81` \x86\x01` \x86\x01a\n^V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`@\x81R`\0a\n\xC1`@\x83\x01\x85a\n\x82V[\x90P`\x01\x80`@\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Q`\xA0\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x0B\x10Wa\x0B\x10a\n\xD8V[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x0B>Wa\x0B>a\n\xD8V[`@R\x91\x90PV[`\0\x82`\x1F\x83\x01\x12a\x0BWW`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0BpWa\x0Bpa\n\xD8V[a\x0B\x83`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0B\x16V[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a\x0B\x98W`\0\x80\xFD[a\x0B\xA9\x82` \x83\x01` \x87\x01a\n^V[\x94\x93PPPPV[\x80Q\x80\x15\x15\x81\x14a\x0B\xC1W`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x0B\xD8W`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0B\xEEW`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0B\xFFW`\0\x80\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0C\x18Wa\x0C\x18a\n\xD8V[\x80`\x05\x1Ba\x0C(` \x82\x01a\x0B\x16V[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x0CDW`\0\x80\xFD[` \x85\x01\x92P[\x83\x83\x10\x15a\r3W\x82Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0CiW`\0\x80\xFD[\x85\x01`\xA0\x81\x8A\x03`\x1F\x19\x01\x12\x15a\x0C\x7FW`\0\x80\xFD[a\x0C\x87a\n\xEEV[` \x82\x01Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0C\xA0W`\0\x80\xFD[a\x0C\xAF\x8B` \x83\x86\x01\x01a\x0BFV[\x82RP`@\x82\x01Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0C\xCBW`\0\x80\xFD[a\x0C\xDA\x8B` \x83\x86\x01\x01a\x0BFV[` \x83\x01RP``\x82\x01Q`\x01`\x01`@\x1B\x03\x81\x16\x81\x14a\x0C\xFAW`\0\x80\xFD[`@\x82\x01Ra\r\x0B`\x80\x83\x01a\x0B\xB1V[``\x82\x01Ra\r\x1C`\xA0\x83\x01a\x0B\xB1V[`\x80\x82\x01R\x83RP` \x92\x83\x01\x92\x90\x91\x01\x90a\x0CKV[\x97\x96PPPPPPPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\rfW`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\r|W`\0\x80\xFD[a\x0B\xA9\x84\x82\x85\x01a\x0BFV[`/`\xF8\x1B\x81R`\0\x82Qa\r\xA4\x81`\x01\x85\x01` \x87\x01a\n^V[`/`\xF8\x1B`\x01\x93\x90\x91\x01\x92\x83\x01RP`\x02\x01\x91\x90PV[` \x81R`\0a\0\xFB` \x83\x01\x84a\n\x82V[`@\x81R`\0a\r\xE2`@\x83\x01\x84a\n\x82V[\x82\x81\x03` \x84\x01R`\n\x81Ri\x02\xE7F\x96\xD6W7F\x16\xD7`\xB4\x1B` \x82\x01R`@\x81\x01\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x0E W`\0\x80\xFD[PQ\x91\x90PV[q\x02sy\x03\x1B{s\xA3\x93\x0B\x1B\xA1\x03s\x0Bk+!`u\x1B\x81R`'`\xF8\x1B`\x12\x82\x01R`\0\x83Qa\x0E^\x81`\x13\x85\x01` \x88\x01a\n^V[`'`\xF8\x1B`\x13\x91\x84\x01\x91\x82\x01R\x7F has been deployed on chain \0\0\0\0`\x14\x82\x01R\x83Qa\x0E\xA5\x81`0\x84\x01` \x88\x01a\n^V[\x01`0\x01\x94\x93PPPPV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x81\x81\x03\x81\x81\x11\x15a\0\xFEWa\0\xFEa\x0E\xB1V[\x80\x82\x01\x80\x82\x11\x15a\0\xFEWa\0\xFEa\x0E\xB1V[`\0`\x01\x82\x01a\x0E\xFFWa\x0E\xFFa\x0E\xB1V[P`\x01\x01\x90V[n$.transactions[`\x88\x1B\x81R`\0\x82Qa\x0F0\x81`\x0F\x85\x01` \x87\x01a\n^V[`]`\xF8\x1B`\x0F\x93\x90\x91\x01\x92\x83\x01RP`\x10\x01\x91\x90PV[`@\x81R`\0a\x0F[`@\x83\x01\x85a\n\x82V[\x82\x81\x03` \x84\x01Ra\x0Fm\x81\x85a\n\x82V[\x95\x94PPPPPV[`\0` \x82\x84\x03\x12\x15a\x0F\x88W`\0\x80\xFD[a\0\xFB\x82a\x0B\xB1V[n$.transactions[`\x88\x1B\x81R`\0\x82Qa\x0F\xBB\x81`\x0F\x85\x01` \x87\x01a\n^V[m].contractName`\x90\x1B`\x0F\x93\x90\x91\x01\x92\x83\x01RP`\x1D\x01\x91\x90PV[n$.transactions[`\x88\x1B\x81R`\0\x82Qa\x10\n\x81`\x0F\x85\x01` \x87\x01a\n^V[p].contractAddress`x\x1B`\x0F\x93\x90\x91\x01\x92\x83\x01RP` \x01\x91\x90PV[`\0\x82Qa\x10D\x81\x84` \x87\x01a\n^V[\x91\x90\x91\x01\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x10`W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x055W`\0\x80\xFD[a\x0F\x0E\x80a\x10\x86`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\xC0@b&\x14a\0;W\x80c\xF8\xCC\xBFG\x14a\0EW[`\0\x80\xFD[a\0Ca\0lV[\0[`\x0CTa\0X\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\rT`\x0CT`@\x80QcQk\xE4G`\xE1\x1B\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93`\0\x93c\x01\0\0\0\x90\x04\x16\x91c\xA2\xD7\xC8\x8E\x91`\x04\x80\x83\x01\x92a\x01@\x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\0\xC5W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xE9\x91\x90a\n\x8CV[\x90P`\0\x80`\0\x80`\0\x80\x87`\x01`\x01`\xA0\x1B\x03\x16c\xE8\xF3yc`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\xC0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x012W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01V\x91\x90a\x0BQV[`\xC0\x8D\x01Q`@\x80Qc\x01X\x7F\x95`\xE6\x1B\x81R`\x04\x81\x01\x91\x90\x91R`\x0C`D\x82\x01Rk\x14\xD5T\x14\x13\x16W\xD0T\xD4\xD1U`\xA2\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`$\x82\x01R\x95\x9BP\x93\x99P\x91\x97P\x95P\x93P\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\x1F\xE5@\x90`\x84\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xE8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x0C\x91\x90a\x0B\x9BV[`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90Ua\x01 \x88\x01Q`@\x80Qc\x01X\x7F\x95`\xE6\x1B\x81R`\x04\x81\x01\x91\x90\x91R`\x0C`D\x82\x01Rk\x10\x93\xD4\x94\x93\xD5\xD7\xD0T\xD4\xD1U`\xA2\x1B`d\x82\x01R\x91\x16`$\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\x1F\xE5@\x90`\x84\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xA3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xC7\x91\x90a\x0B\x9BV[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U`@Qcp\xA0\x821`\xE0\x1B\x81R\x91\x8A\x16`\x04\x83\x01R`\0\x91cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03$W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03H\x91\x90a\x0B\xBDV[`\x0ET`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8C\x81\x16`\x04\x83\x01R\x92\x93P`\0\x92\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x98W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xBC\x91\x90a\x0B\xBDV[\x90P`\0a\x03\xCB\x83`\x12a\x07\x0FV[\x90P`\0a\x03\xDA\x83`\x06a\x07\x0FV[`\x0FT`@Qcp\xA0\x821`\xE0\x1B\x81R3`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04(W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04L\x91\x90a\x0B\xBDV[`\x0ET`@Qcp\xA0\x821`\xE0\x1B\x81R3`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x9AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xBE\x91\x90a\x0B\xBDV[\x90P`\0a\x04\xCD\x83`\x12a\x07\x0FV[\x90P`\0a\x04\xDC\x83`\x06a\x07\x0FV[\x90P`\0a\x04\xEB\x8F`\x08a\x07\x0FV[\x90P`\0a\x04\xFA\x8F`\x08a\x07\x0FV[\x90P`\0a\x05\t\x8F`\x08a\x07\x0FV[`@\x80Q\x80\x82\x01\x90\x91R`\x11\x81Rp!\xB7\xB7:90\xB1\xBA\x100\xB2292\xB9\xB9\x9D`y\x1B` \x82\x01R`\rT\x91\x92Pa\x05I\x91`\x01`\x01`\xA0\x1B\x03\x16a\x07\xB7V[a\x05k`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x0EM`%\x919\x8Aa\x08\0V[a\x05\x8D`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x0E\xB4`%\x919\x89a\x08\0V[a\x05\xAF`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x0Er`!\x919\x86a\x08\0V[a\x05\xD1`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x0E\x93`!\x919\x85a\x08\0V[a\x06\x04`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p*7\xBA0\xB6\x101\xB7\xB660\xBA2\xB90\xB6\x1D`y\x1B\x81RP\x84a\x08\0V[a\x061`@Q\x80`@\x01`@R\x80`\x0B\x81R` \x01j*7\xBA0\xB6\x1022\xB1:\x1D`\xA9\x1B\x81RP\x83a\x08\0V[a\x06e`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q \xBB0\xB4\xB60\xB162\x9017\xB997\xBB\xB9\x9D`q\x1B\x81RP\x82a\x08\0V[a\x06\xA4`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FCurrent liquidation threshold:\0\0\x81RP\x8Fa\x08EV[a\x06\xCA`@Q\x80`@\x01`@R\x80`\x04\x81R` \x01c&*+\x1D`\xE1\x1B\x81RP\x8Ea\x08EV[a\x06\xFA`@Q\x80`@\x01`@R\x80`\x0E\x81R` \x01m$2\xB0\xB6:4\x1030\xB1\xBA7\xB9\x1D`\x91\x1B\x81RP\x8Da\x08EV[PPPPPPPPPPPPPPPPPPPV[```\0a\x07\x1E\x83`\na\x0C\xD3V[\x90P`\0a\x07,\x82\x86a\x0C\xF5V[\x90P`\0a\x07:\x83\x87a\r\tV[\x90P`\0a\x07G\x83a\x08\x8AV[\x90P`\0a\x07T\x83a\x08\x8AV[\x90P[\x86\x81Q\x10\x15a\x07\x87W\x80`@Q` \x01a\x07q\x91\x90a\rAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90Pa\x07WV[\x81\x81`@Q` \x01a\x07\x9A\x92\x91\x90a\rjV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x95PPPPPP[\x92\x91PPV[a\x07\xFC\x82\x82`@Q`$\x01a\x07\xCD\x92\x91\x90a\r\xD2V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\t\x1DV[PPV[a\x07\xFC\x82\x82`@Q`$\x01a\x08\x16\x92\x91\x90a\r\xFCV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\t\x1DV[a\x07\xFC\x82\x82`@Q`$\x01a\x08[\x92\x91\x90a\x0E*V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\tq\n\x9D`\xE4\x1B\x17\x90Ra\t\x1DV[```\0a\x08\x97\x83a\t)V[`\x01\x01\x90P`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xB7Wa\x08\xB7a\n\"V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x08\xE1W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x81\x81\x01` \x01[`\0\x19\x01o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x86\x06\x1A\x81S`\n\x85\x04\x94P\x84a\x08\xEBWP\x93\x92PPPV[a\t&\x81a\n\x01V[PV[`\0\x80r\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x10a\thWr\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x04\x92P`@\x01[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a\t\x94Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x04\x92P` \x01[f#\x86\xF2o\xC1\0\0\x83\x10a\t\xB2Wf#\x86\xF2o\xC1\0\0\x83\x04\x92P`\x10\x01[c\x05\xF5\xE1\0\x83\x10a\t\xCAWc\x05\xF5\xE1\0\x83\x04\x92P`\x08\x01[a'\x10\x83\x10a\t\xDEWa'\x10\x83\x04\x92P`\x04\x01[`d\x83\x10a\t\xF0W`d\x83\x04\x92P`\x02\x01[`\n\x83\x10a\x07\xB1W`\x01\x01\x92\x91PPV[\x80Qjconsole.log` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Qa\x01@\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\njWcNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@R\x90V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x87W`\0\x80\xFD[\x91\x90PV[`\0a\x01@\x82\x84\x03\x12\x80\x15a\n\xA0W`\0\x80\xFD[Pa\n\xA9a\n8V[\x82Q\x81Ra\n\xB9` \x84\x01a\npV[` \x82\x01Ra\n\xCA`@\x84\x01a\npV[`@\x82\x01Ra\n\xDB``\x84\x01a\npV[``\x82\x01Ra\n\xEC`\x80\x84\x01a\npV[`\x80\x82\x01Ra\n\xFD`\xA0\x84\x01a\npV[`\xA0\x82\x01Ra\x0B\x0E`\xC0\x84\x01a\npV[`\xC0\x82\x01Ra\x0B\x1F`\xE0\x84\x01a\npV[`\xE0\x82\x01Ra\x0B1a\x01\0\x84\x01a\npV[a\x01\0\x82\x01Ra\x0BDa\x01 \x84\x01a\npV[a\x01 \x82\x01R\x93\x92PPPV[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x0BjW`\0\x80\xFD[PP\x84Q` \x86\x01Q`@\x87\x01Q``\x88\x01Q`\x80\x89\x01Q`\xA0\x90\x99\x01Q\x93\x9A\x92\x99P\x90\x97\x90\x96P\x94P\x90\x92P\x90PV[`\0` \x82\x84\x03\x12\x15a\x0B\xADW`\0\x80\xFD[a\x0B\xB6\x82a\npV[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x0B\xCFW`\0\x80\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\x01\x81[`\x01\x84\x11\x15a\x0C'W\x80\x85\x04\x81\x11\x15a\x0C\x0BWa\x0C\x0Ba\x0B\xD6V[`\x01\x84\x16\x15a\x0C\x19W\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x0B\xF0V[\x93P\x93\x91PPV[`\0\x82a\x0C>WP`\x01a\x07\xB1V[\x81a\x0CKWP`\0a\x07\xB1V[\x81`\x01\x81\x14a\x0CaW`\x02\x81\x14a\x0CkWa\x0C\x87V[`\x01\x91PPa\x07\xB1V[`\xFF\x84\x11\x15a\x0C|Wa\x0C|a\x0B\xD6V[PP`\x01\x82\x1Ba\x07\xB1V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x0C\xAAWP\x81\x81\na\x07\xB1V[a\x0C\xB7`\0\x19\x84\x84a\x0B\xECV[\x80`\0\x19\x04\x82\x11\x15a\x0C\xCBWa\x0C\xCBa\x0B\xD6V[\x02\x93\x92PPPV[`\0a\x0B\xB6\x83\x83a\x0C/V[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[`\0\x82a\r\x04Wa\r\x04a\x0C\xDFV[P\x04\x90V[`\0\x82a\r\x18Wa\r\x18a\x0C\xDFV[P\x06\x90V[`\0[\x83\x81\x10\x15a\r8W\x81\x81\x01Q\x83\x82\x01R` \x01a\r V[PP`\0\x91\x01RV[`\x03`\xFC\x1B\x81R`\0\x82Qa\r]\x81`\x01\x85\x01` \x87\x01a\r\x1DV[\x91\x90\x91\x01`\x01\x01\x92\x91PPV[`\0\x83Qa\r|\x81\x84` \x88\x01a\r\x1DV[`\x17`\xF9\x1B\x90\x83\x01\x90\x81R\x83Qa\r\x9A\x81`\x01\x84\x01` \x88\x01a\r\x1DV[\x01`\x01\x01\x94\x93PPPPV[`\0\x81Q\x80\x84Ra\r\xBE\x81` \x86\x01` \x86\x01a\r\x1DV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`@\x81R`\0a\r\xE5`@\x83\x01\x85a\r\xA6V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R`\0a\x0E\x0F`@\x83\x01\x85a\r\xA6V[\x82\x81\x03` \x84\x01Ra\x0E!\x81\x85a\r\xA6V[\x95\x94PPPPPV[`@\x81R`\0a\x0E=`@\x83\x01\x85a\r\xA6V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFEBorrow asset contract balance (WETH):Borrow asset user balance (WETH):Supply asset user balance (USDC):Supply asset contract balance (USDC):\xA2dipfsX\"\x12 *X\x19?irbN\x14\xD6N\xF6l~\x84\xD7\x15\x10\xB0\x1B\x02[\xC1\xBDD\xB3\x076X\xEC\xFB dsolcC\0\x08\x1A\x003`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15a\0!W`\0\x80\xFD[PFa\xA4\xB1\x14\x80a\x003WPFazi\x14[\x15a\x03\x07W`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R`\0\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xA0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xC4\x91\x90a\t\x03V[`@\x80Qa\x01@\x81\x01\x82R\x82\x81R\x90Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x83\x90R\x91\x92P\x90` \x82\x01\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01'W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01K\x91\x90a\t\x1CV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82RsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD` \x80\x84\x01\x91\x90\x91Rs\x92\x9E\xC6L4\xA1t\x01\xF4`F\rK\x93\x90Q\x8E[G>`@\x80\x85\x01\x91\x90\x91Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84``\x80\x86\x01\x91\x90\x91Rs\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d`\x80\x80\x87\x01\x91\x90\x91Rs\xAF\x88\xD0e\xE7|\x8C\xC2#\x93'\xC5\xED\xB3\xA42&\x8EX1`\xA0\x80\x88\x01\x91\x90\x91Rs\xFD\x08k\xC7\xCD\\H\x1D\xCC\x9C\x85\xEB\xE4x\xA1\xC0\xB6\x9F\xCB\xB9`\xC0\x80\x89\x01\x91\x90\x91Rs\xDA\x10\0\x9C\xBD]\x07\xDD\x0C\xEC\xC6aa\xFC\x93\xD7\xC9\0\r\xA1`\xE0\x80\x8A\x01\x91\x90\x91Rs\x82\xAFID}\x8A\x07\xE3\xBD\x95\xBD\rV\xF3RAR?\xBA\xB1a\x01\0\x99\x8A\x01R\x89Q`\rU\x95\x89\x01Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x92\x8A\x16\x92\x90\x92\x17\x90U\x94\x89\x01Q`\x0F\x80T\x87\x16\x91\x89\x16\x91\x90\x91\x17\x90U\x92\x88\x01Q`\x10\x80T\x86\x16\x91\x88\x16\x91\x90\x91\x17\x90U\x90\x87\x01Q`\x11\x80T\x85\x16\x91\x87\x16\x91\x90\x91\x17\x90U\x86\x01Q`\x12\x80T\x84\x16\x91\x86\x16\x91\x90\x91\x17\x90U\x85\x01Q`\x13\x80T\x83\x16\x91\x85\x16\x91\x90\x91\x17\x90U\x90\x84\x01Q`\x14\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91\x83\x01Q`\x15\x80T\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90Ua\x01 \x90\x92\x01Q`\x16\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UPa\tLV[F`\x01\x03a\x05\xDEW`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R`\0\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03wW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\x9B\x91\x90a\t\x03V[`@\x80Qa\x01@\x81\x01\x82R\x82\x81R\x90Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x83\x90R\x91\x92P\x90` \x82\x01\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xFEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\"\x91\x90a\t\x1CV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82Rs}'h\xDE2\xB0\xB8\x0Bz4T\xC0k\xDA\xC9Ji\xDD\xC7\xA9` \x80\x84\x01\x91\x90\x91Rs\x81d\xCCe\x82}\xCF\xE9\x94\xAB#\x94L\xBC\x90\xE0\xAA\x80\xBF\xCB`@\x80\x85\x01\x91\x90\x91Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84``\x80\x86\x01\x91\x90\x91Rs\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d`\x80\x80\x87\x01\x91\x90\x91Rs\xA0\xB8i\x91\xC6!\x8B6\xC1\xD1\x9DJ.\x9E\xB0\xCE6\x06\xEBH`\xA0\x80\x88\x01\x91\x90\x91Rs\xDA\xC1\x7F\x95\x8D.\xE5#\xA2 b\x06\x99E\x97\xC1=\x83\x1E\xC7`\xC0\x80\x89\x01\x91\x90\x91Rsk\x17Tt\xE8\x90\x94\xC4M\xA9\x8B\x95N\xED\xEA\xC4\x95'\x1D\x0F`\xE0\x80\x8A\x01\x91\x90\x91Rs\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2a\x01\0\x99\x8A\x01R\x89Q`\rU\x95\x89\x01Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x92\x8A\x16\x92\x90\x92\x17\x90U\x94\x89\x01Q`\x0F\x80T\x87\x16\x91\x89\x16\x91\x90\x91\x17\x90U\x92\x88\x01Q`\x10\x80T\x86\x16\x91\x88\x16\x91\x90\x91\x17\x90U\x90\x87\x01Q`\x11\x80T\x85\x16\x91\x87\x16\x91\x90\x91\x17\x90U\x86\x01Q`\x12\x80T\x84\x16\x91\x86\x16\x91\x90\x91\x17\x90U\x85\x01Q`\x13\x80T\x83\x16\x91\x85\x16\x91\x90\x91\x17\x90U\x90\x84\x01Q`\x14\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91\x83\x01Q`\x15\x80T\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90Ua\x01 \x90\x92\x01Q`\x16\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UPa\tLV[Fb\xAA6\xA7\x03a\x08\xB7W`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R`\0\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06PW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06t\x91\x90a\t\x03V[`@\x80Qa\x01@\x81\x01\x82R\x82\x81R\x90Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x83\x90R\x91\x92P\x90` \x82\x01\x90`\0\x80Q` a\x0C\x8E\x839\x81Q\x91R\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06\xD7W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xFB\x91\x90a\t\x1CV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82Rsj\xE4=2q\xFFh\x88\xE7\xFCC\xFDs!\xA5\x03\xFFs\x89Q` \x80\x84\x01\x91\x90\x91RsM\xA5\xC4\xDAq\xC5\xA1g\x17\x1C\xC89Hu6\xD8n\x084\x83`@\x80\x85\x01\x91\x90\x91Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84``\x80\x86\x01\x91\x90\x91Rs\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d`\x80\x80\x87\x01\x91\x90\x91Rs\x94\xA9\xD9\xAC\x8A\"SN?\xAC\xA9\xF4\xE7\xF2\xE2\xCF\x85\xD5\xE4\xC8`\xA0\x80\x88\x01\x91\x90\x91Rs\xAA\x8E#\xFB\x10y\xEAq\xE0\xA5oH\xA2\xAAQ\x85\x1D\x843\xD0`\xC0\x80\x89\x01\x91\x90\x91Rs\xFF4\xB3\xD4\xAE\xE8\xDD\xCDo\x9A\xFF\xFBo\xE4\x9B\xD3q\xB8\xA3W`\xE0\x80\x8A\x01\x91\x90\x91Rs\xC5X\xDB\xDD\x85e\x01\xFC\xD9\xAA\xF1\xE6.\xAEW\xA9\xF0b\x9A<a\x01\0\x99\x8A\x01R\x89Q`\rU\x95\x89\x01Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x92\x8A\x16\x92\x90\x92\x17\x90U\x94\x89\x01Q`\x0F\x80T\x87\x16\x91\x89\x16\x91\x90\x91\x17\x90U\x92\x88\x01Q`\x10\x80T\x86\x16\x91\x88\x16\x91\x90\x91\x17\x90U\x90\x87\x01Q`\x11\x80T\x85\x16\x91\x87\x16\x91\x90\x91\x17\x90U\x86\x01Q`\x12\x80T\x84\x16\x91\x86\x16\x91\x90\x91\x17\x90U\x85\x01Q`\x13\x80T\x83\x16\x91\x85\x16\x91\x90\x91\x17\x90U\x90\x84\x01Q`\x14\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91\x83\x01Q`\x15\x80T\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90Ua\x01 \x90\x92\x01Q`\x16\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UPa\tLV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUnsupported network\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[`\0` \x82\x84\x03\x12\x15a\t\x15W`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\t.W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\tEW`\0\x80\xFD[\x93\x92PPPV[a\x033\x80a\t[`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\xA2\xD7\xC8\x8E\x14a\0FW\x80c\xD7\xB6WE\x14a\x01,W\x80c\xF8\xCC\xBFG\x14a\x01\xD3W[`\0\x80\xFD[a\x01\x16`@\x80Qa\x01@\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x91\x90\x91RP`@\x80Qa\x01@\x81\x01\x82R`\rT\x81R`\x0ET`\x01`\x01`\xA0\x1B\x03\x90\x81\x16` \x83\x01R`\x0FT\x81\x16\x92\x82\x01\x92\x90\x92R`\x10T\x82\x16``\x82\x01R`\x11T\x82\x16`\x80\x82\x01R`\x12T\x82\x16`\xA0\x82\x01R`\x13T\x82\x16`\xC0\x82\x01R`\x14T\x82\x16`\xE0\x82\x01R`\x15T\x82\x16a\x01\0\x82\x01R`\x16T\x90\x91\x16a\x01 \x82\x01R\x90V[`@Qa\x01#\x91\x90a\x01\xF6V[`@Q\x80\x91\x03\x90\xF3[`\rT`\x0ET`\x0FT`\x10T`\x11T`\x12T`\x13T`\x14T`\x15T`\x16Ta\x01t\x99\x98`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x98\x81\x16\x97\x81\x16\x96\x81\x16\x95\x81\x16\x94\x81\x16\x93\x81\x16\x92\x81\x16\x91\x16\x8AV[`@\x80Q\x9A\x8BR`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16` \x8C\x01R\x97\x89\x16\x97\x8A\x01\x97\x90\x97R\x94\x87\x16``\x89\x01R\x92\x86\x16`\x80\x88\x01R\x90\x85\x16`\xA0\x87\x01R\x84\x16`\xC0\x86\x01R\x83\x16`\xE0\x85\x01R\x82\x16a\x01\0\x84\x01R\x16a\x01 \x82\x01Ra\x01@\x01a\x01#V[`\x0CTa\x01\xE6\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01#V[\x81Q\x81R` \x80\x83\x01Qa\x01@\x83\x01\x91a\x02\x1A\x90\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`@\x83\x01Qa\x025`@\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P``\x83\x01Qa\x02P``\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\x80\x83\x01Qa\x02k`\x80\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xA0\x83\x01Qa\x02\x86`\xA0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xC0\x83\x01Qa\x02\xA1`\xC0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\xE0\x83\x01Qa\x02\xBC`\xE0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[Pa\x01\0\x83\x01Qa\x02\xD9a\x01\0\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[Pa\x01 \x83\x01Qa\x02\xF6a\x01 \x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xA9\x1F\xBB3D\xDBH[\x04)@\xBB\xCB\xA7\x14p\x83[\x8A\\\xE1\xB4\xFDT\x8D\xE7n\xB9\xD5\x9C\xBAgdsolcC\0\x08\x1A\x003\0\0\0\0\0\0\0\0\0\0\0\0q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\0\0\0\0\0\0\0\0\0\0\0\0q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063c04062261461003b578063f8ccbf4714610045575b600080fd5b61004361006c565b005b600c546100589062010000900460ff1681565b604051901515815260200160405180910390f35b600d54600c546040805163516be44760e11b815290516001600160a01b039384169360009363010000009004169163a2d7c88e916004808301926101409291908290030181865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e99190610a8c565b9050600080600080600080876001600160a01b031663e8f379636040518163ffffffff1660e01b815260040160c060405180830381865afa158015610132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101569190610b51565b60c08d0151604080516301587f9560e61b81526004810191909152600c60448201526b14d55414131657d054d4d15560a21b60648201526001600160a01b039091166024820152959b50939950919750955093509150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063561fe54090608401602060405180830381865afa1580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c9190610b9b565b600e80546001600160a01b0319166001600160a01b03928316179055610120880151604080516301587f9560e61b81526004810191909152600c60448201526b1093d49493d5d7d054d4d15560a21b606482015291166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063561fe54090608401602060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610b9b565b600f80546001600160a01b0319166001600160a01b039283169081179091556040516370a0823160e01b8152918a1660048301526000916370a0823190602401602060405180830381865afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103489190610bbd565b600e546040516370a0823160e01b81526001600160a01b038c81166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190610bbd565b905060006103cb83601261070f565b905060006103da83600661070f565b600f546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610bbd565b600e546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190610bbd565b905060006104cd83601261070f565b905060006104dc83600661070f565b905060006104eb8f600861070f565b905060006104fa8f600861070f565b905060006105098f600861070f565b60408051808201909152601181527021b7b73a3930b1ba1030b2323932b9b99d60791b6020820152600d54919250610549916001600160a01b03166107b7565b61056b604051806060016040528060258152602001610e4d602591398a610800565b61058d604051806060016040528060258152602001610eb46025913989610800565b6105af604051806060016040528060218152602001610e726021913986610800565b6105d1604051806060016040528060218152602001610e936021913985610800565b610604604051806040016040528060118152602001702a37ba30b61031b7b63630ba32b930b61d60791b81525084610800565b6106316040518060400160405280600b81526020016a2a37ba30b6103232b13a1d60a91b81525083610800565b6106656040518060400160405280601281526020017120bb30b4b630b13632903137b93937bbb99d60711b81525082610800565b6106a46040518060400160405280601e81526020017f43757272656e74206c69717569646174696f6e207468726573686f6c643a00008152508f610845565b6106ca60405180604001604052806004815260200163262a2b1d60e11b8152508e610845565b6106fa6040518060400160405280600e81526020016d2432b0b63a34103330b1ba37b91d60911b8152508d610845565b50505050505050505050505050505050505050565b6060600061071e83600a610cd3565b9050600061072c8286610cf5565b9050600061073a8387610d09565b905060006107478361088a565b905060006107548361088a565b90505b868151101561078757806040516020016107719190610d41565b6040516020818303038152906040529050610757565b818160405160200161079a929190610d6a565b604051602081830303815290604052955050505050505b92915050565b6107fc82826040516024016107cd929190610dd2565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261091d565b5050565b6107fc8282604051602401610816929190610dfc565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b17905261091d565b6107fc828260405160240161085b929190610e2a565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261091d565b6060600061089783610929565b600101905060008167ffffffffffffffff8111156108b7576108b7610a22565b6040519080825280601f01601f1916602001820160405280156108e1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846108eb57509392505050565b61092681610a01565b50565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106109685772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610994576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106109b257662386f26fc10000830492506010015b6305f5e10083106109ca576305f5e100830492506008015b61271083106109de57612710830492506004015b606483106109f0576064830492506002015b600a83106107b15760010192915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610a6a57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114610a8757600080fd5b919050565b6000610140828403128015610aa057600080fd5b50610aa9610a38565b82518152610ab960208401610a70565b6020820152610aca60408401610a70565b6040820152610adb60608401610a70565b6060820152610aec60808401610a70565b6080820152610afd60a08401610a70565b60a0820152610b0e60c08401610a70565b60c0820152610b1f60e08401610a70565b60e0820152610b316101008401610a70565b610100820152610b446101208401610a70565b6101208201529392505050565b60008060008060008060c08789031215610b6a57600080fd5b50508451602086015160408701516060880151608089015160a090990151939a929950909790965094509092509050565b600060208284031215610bad57600080fd5b610bb682610a70565b9392505050565b600060208284031215610bcf57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001815b6001841115610c2757808504811115610c0b57610c0b610bd6565b6001841615610c1957908102905b60019390931c928002610bf0565b935093915050565b600082610c3e575060016107b1565b81610c4b575060006107b1565b8160018114610c615760028114610c6b57610c87565b60019150506107b1565b60ff841115610c7c57610c7c610bd6565b50506001821b6107b1565b5060208310610133831016604e8410600b8410161715610caa575081810a6107b1565b610cb76000198484610bec565b8060001904821115610ccb57610ccb610bd6565b029392505050565b6000610bb68383610c2f565b634e487b7160e01b600052601260045260246000fd5b600082610d0457610d04610cdf565b500490565b600082610d1857610d18610cdf565b500690565b60005b83811015610d38578181015183820152602001610d20565b50506000910152565b600360fc1b815260008251610d5d816001850160208701610d1d565b9190910160010192915050565b60008351610d7c818460208801610d1d565b601760f91b9083019081528351610d9a816001840160208801610d1d565b01600101949350505050565b60008151808452610dbe816020860160208601610d1d565b601f01601f19169290920160200192915050565b604081526000610de56040830185610da6565b905060018060a01b03831660208301529392505050565b604081526000610e0f6040830185610da6565b8281036020840152610e218185610da6565b95945050505050565b604081526000610e3d6040830185610da6565b9050826020830152939250505056fe426f72726f7720617373657420636f6e74726163742062616c616e6365202857455448293a426f72726f7720617373657420757365722062616c616e6365202857455448293a537570706c7920617373657420757365722062616c616e6365202855534443293a537570706c7920617373657420636f6e74726163742062616c616e6365202855534443293aa26469706673582212202a58193f6972624e14d64ef66c7e84d71510b01b025bc1bd44b3073658ecfb2064736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\xC0@b&\x14a\0;W\x80c\xF8\xCC\xBFG\x14a\0EW[`\0\x80\xFD[a\0Ca\0lV[\0[`\x0CTa\0X\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\rT`\x0CT`@\x80QcQk\xE4G`\xE1\x1B\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93`\0\x93c\x01\0\0\0\x90\x04\x16\x91c\xA2\xD7\xC8\x8E\x91`\x04\x80\x83\x01\x92a\x01@\x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\0\xC5W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xE9\x91\x90a\n\x8CV[\x90P`\0\x80`\0\x80`\0\x80\x87`\x01`\x01`\xA0\x1B\x03\x16c\xE8\xF3yc`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\xC0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x012W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01V\x91\x90a\x0BQV[`\xC0\x8D\x01Q`@\x80Qc\x01X\x7F\x95`\xE6\x1B\x81R`\x04\x81\x01\x91\x90\x91R`\x0C`D\x82\x01Rk\x14\xD5T\x14\x13\x16W\xD0T\xD4\xD1U`\xA2\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`$\x82\x01R\x95\x9BP\x93\x99P\x91\x97P\x95P\x93P\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\x1F\xE5@\x90`\x84\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xE8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x0C\x91\x90a\x0B\x9BV[`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90Ua\x01 \x88\x01Q`@\x80Qc\x01X\x7F\x95`\xE6\x1B\x81R`\x04\x81\x01\x91\x90\x91R`\x0C`D\x82\x01Rk\x10\x93\xD4\x94\x93\xD5\xD7\xD0T\xD4\xD1U`\xA2\x1B`d\x82\x01R\x91\x16`$\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\x1F\xE5@\x90`\x84\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xA3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xC7\x91\x90a\x0B\x9BV[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U`@Qcp\xA0\x821`\xE0\x1B\x81R\x91\x8A\x16`\x04\x83\x01R`\0\x91cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03$W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03H\x91\x90a\x0B\xBDV[`\x0ET`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8C\x81\x16`\x04\x83\x01R\x92\x93P`\0\x92\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x98W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xBC\x91\x90a\x0B\xBDV[\x90P`\0a\x03\xCB\x83`\x12a\x07\x0FV[\x90P`\0a\x03\xDA\x83`\x06a\x07\x0FV[`\x0FT`@Qcp\xA0\x821`\xE0\x1B\x81R3`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04(W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04L\x91\x90a\x0B\xBDV[`\x0ET`@Qcp\xA0\x821`\xE0\x1B\x81R3`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x9AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xBE\x91\x90a\x0B\xBDV[\x90P`\0a\x04\xCD\x83`\x12a\x07\x0FV[\x90P`\0a\x04\xDC\x83`\x06a\x07\x0FV[\x90P`\0a\x04\xEB\x8F`\x08a\x07\x0FV[\x90P`\0a\x04\xFA\x8F`\x08a\x07\x0FV[\x90P`\0a\x05\t\x8F`\x08a\x07\x0FV[`@\x80Q\x80\x82\x01\x90\x91R`\x11\x81Rp!\xB7\xB7:90\xB1\xBA\x100\xB2292\xB9\xB9\x9D`y\x1B` \x82\x01R`\rT\x91\x92Pa\x05I\x91`\x01`\x01`\xA0\x1B\x03\x16a\x07\xB7V[a\x05k`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x0EM`%\x919\x8Aa\x08\0V[a\x05\x8D`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x0E\xB4`%\x919\x89a\x08\0V[a\x05\xAF`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x0Er`!\x919\x86a\x08\0V[a\x05\xD1`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x0E\x93`!\x919\x85a\x08\0V[a\x06\x04`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p*7\xBA0\xB6\x101\xB7\xB660\xBA2\xB90\xB6\x1D`y\x1B\x81RP\x84a\x08\0V[a\x061`@Q\x80`@\x01`@R\x80`\x0B\x81R` \x01j*7\xBA0\xB6\x1022\xB1:\x1D`\xA9\x1B\x81RP\x83a\x08\0V[a\x06e`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q \xBB0\xB4\xB60\xB162\x9017\xB997\xBB\xB9\x9D`q\x1B\x81RP\x82a\x08\0V[a\x06\xA4`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FCurrent liquidation threshold:\0\0\x81RP\x8Fa\x08EV[a\x06\xCA`@Q\x80`@\x01`@R\x80`\x04\x81R` \x01c&*+\x1D`\xE1\x1B\x81RP\x8Ea\x08EV[a\x06\xFA`@Q\x80`@\x01`@R\x80`\x0E\x81R` \x01m$2\xB0\xB6:4\x1030\xB1\xBA7\xB9\x1D`\x91\x1B\x81RP\x8Da\x08EV[PPPPPPPPPPPPPPPPPPPV[```\0a\x07\x1E\x83`\na\x0C\xD3V[\x90P`\0a\x07,\x82\x86a\x0C\xF5V[\x90P`\0a\x07:\x83\x87a\r\tV[\x90P`\0a\x07G\x83a\x08\x8AV[\x90P`\0a\x07T\x83a\x08\x8AV[\x90P[\x86\x81Q\x10\x15a\x07\x87W\x80`@Q` \x01a\x07q\x91\x90a\rAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90Pa\x07WV[\x81\x81`@Q` \x01a\x07\x9A\x92\x91\x90a\rjV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x95PPPPPP[\x92\x91PPV[a\x07\xFC\x82\x82`@Q`$\x01a\x07\xCD\x92\x91\x90a\r\xD2V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\t\x1DV[PPV[a\x07\xFC\x82\x82`@Q`$\x01a\x08\x16\x92\x91\x90a\r\xFCV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\t\x1DV[a\x07\xFC\x82\x82`@Q`$\x01a\x08[\x92\x91\x90a\x0E*V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\tq\n\x9D`\xE4\x1B\x17\x90Ra\t\x1DV[```\0a\x08\x97\x83a\t)V[`\x01\x01\x90P`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xB7Wa\x08\xB7a\n\"V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x08\xE1W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x81\x81\x01` \x01[`\0\x19\x01o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x86\x06\x1A\x81S`\n\x85\x04\x94P\x84a\x08\xEBWP\x93\x92PPPV[a\t&\x81a\n\x01V[PV[`\0\x80r\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x10a\thWr\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x04\x92P`@\x01[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a\t\x94Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x04\x92P` \x01[f#\x86\xF2o\xC1\0\0\x83\x10a\t\xB2Wf#\x86\xF2o\xC1\0\0\x83\x04\x92P`\x10\x01[c\x05\xF5\xE1\0\x83\x10a\t\xCAWc\x05\xF5\xE1\0\x83\x04\x92P`\x08\x01[a'\x10\x83\x10a\t\xDEWa'\x10\x83\x04\x92P`\x04\x01[`d\x83\x10a\t\xF0W`d\x83\x04\x92P`\x02\x01[`\n\x83\x10a\x07\xB1W`\x01\x01\x92\x91PPV[\x80Qjconsole.log` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Qa\x01@\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\njWcNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@R\x90V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x87W`\0\x80\xFD[\x91\x90PV[`\0a\x01@\x82\x84\x03\x12\x80\x15a\n\xA0W`\0\x80\xFD[Pa\n\xA9a\n8V[\x82Q\x81Ra\n\xB9` \x84\x01a\npV[` \x82\x01Ra\n\xCA`@\x84\x01a\npV[`@\x82\x01Ra\n\xDB``\x84\x01a\npV[``\x82\x01Ra\n\xEC`\x80\x84\x01a\npV[`\x80\x82\x01Ra\n\xFD`\xA0\x84\x01a\npV[`\xA0\x82\x01Ra\x0B\x0E`\xC0\x84\x01a\npV[`\xC0\x82\x01Ra\x0B\x1F`\xE0\x84\x01a\npV[`\xE0\x82\x01Ra\x0B1a\x01\0\x84\x01a\npV[a\x01\0\x82\x01Ra\x0BDa\x01 \x84\x01a\npV[a\x01 \x82\x01R\x93\x92PPPV[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x0BjW`\0\x80\xFD[PP\x84Q` \x86\x01Q`@\x87\x01Q``\x88\x01Q`\x80\x89\x01Q`\xA0\x90\x99\x01Q\x93\x9A\x92\x99P\x90\x97\x90\x96P\x94P\x90\x92P\x90PV[`\0` \x82\x84\x03\x12\x15a\x0B\xADW`\0\x80\xFD[a\x0B\xB6\x82a\npV[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x0B\xCFW`\0\x80\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\x01\x81[`\x01\x84\x11\x15a\x0C'W\x80\x85\x04\x81\x11\x15a\x0C\x0BWa\x0C\x0Ba\x0B\xD6V[`\x01\x84\x16\x15a\x0C\x19W\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x0B\xF0V[\x93P\x93\x91PPV[`\0\x82a\x0C>WP`\x01a\x07\xB1V[\x81a\x0CKWP`\0a\x07\xB1V[\x81`\x01\x81\x14a\x0CaW`\x02\x81\x14a\x0CkWa\x0C\x87V[`\x01\x91PPa\x07\xB1V[`\xFF\x84\x11\x15a\x0C|Wa\x0C|a\x0B\xD6V[PP`\x01\x82\x1Ba\x07\xB1V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x0C\xAAWP\x81\x81\na\x07\xB1V[a\x0C\xB7`\0\x19\x84\x84a\x0B\xECV[\x80`\0\x19\x04\x82\x11\x15a\x0C\xCBWa\x0C\xCBa\x0B\xD6V[\x02\x93\x92PPPV[`\0a\x0B\xB6\x83\x83a\x0C/V[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[`\0\x82a\r\x04Wa\r\x04a\x0C\xDFV[P\x04\x90V[`\0\x82a\r\x18Wa\r\x18a\x0C\xDFV[P\x06\x90V[`\0[\x83\x81\x10\x15a\r8W\x81\x81\x01Q\x83\x82\x01R` \x01a\r V[PP`\0\x91\x01RV[`\x03`\xFC\x1B\x81R`\0\x82Qa\r]\x81`\x01\x85\x01` \x87\x01a\r\x1DV[\x91\x90\x91\x01`\x01\x01\x92\x91PPV[`\0\x83Qa\r|\x81\x84` \x88\x01a\r\x1DV[`\x17`\xF9\x1B\x90\x83\x01\x90\x81R\x83Qa\r\x9A\x81`\x01\x84\x01` \x88\x01a\r\x1DV[\x01`\x01\x01\x94\x93PPPPV[`\0\x81Q\x80\x84Ra\r\xBE\x81` \x86\x01` \x86\x01a\r\x1DV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`@\x81R`\0a\r\xE5`@\x83\x01\x85a\r\xA6V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R`\0a\x0E\x0F`@\x83\x01\x85a\r\xA6V[\x82\x81\x03` \x84\x01Ra\x0E!\x81\x85a\r\xA6V[\x95\x94PPPPPV[`@\x81R`\0a\x0E=`@\x83\x01\x85a\r\xA6V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFEBorrow asset contract balance (WETH):Borrow asset user balance (WETH):Supply asset user balance (USDC):Supply asset contract balance (USDC):\xA2dipfsX\"\x12 *X\x19?irbN\x14\xD6N\xF6l~\x84\xD7\x15\x10\xB0\x1B\x02[\xC1\xBDD\xB3\x076X\xEC\xFB dsolcC\0\x08\x1A\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`GetPosition`](self) function calls.
    pub enum GetPositionCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
    }
    #[automatically_derived]
    impl GetPositionCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GetPositionCalls {
        const NAME: &'static str = "GetPositionCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GetPositionCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GetPositionCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GetPositionCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GetPositionCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GetPositionCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetPosition`](self) contract instance.

See the [wrapper's documentation](`GetPositionInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetPositionInstance<T, P, N> {
        GetPositionInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetPositionInstance<T, P, N>>,
    > {
        GetPositionInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetPositionInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`GetPosition`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetPosition`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetPositionInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetPositionInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetPositionInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetPositionInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetPosition`](self) contract instance.

See the [wrapper's documentation](`GetPositionInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GetPositionInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetPositionInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GetPositionInstance<T, P, N> {
            GetPositionInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetPositionInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetPositionInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
